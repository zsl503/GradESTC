# Full explaination are listed on README.md

mode: serial # [serial, parallel]

parallel: # It's fine to keep these configs.
  # Go check doc of `https://docs.ray.io/en/latest/ray-core/api/doc/ray.init.html` for more details.
  ray_cluster_addr: null # [null, auto, local]

  # `null` implies that all cpus/gpus are included.
  num_cpus: null
  num_gpus: null

  # should be set larger than 1, or training mode fallback to `serial`
  # Set a larger `num_workers` can further boost efficiency, also let each worker have less computational resources.
  num_workers: 2

common:
  # [mnist, cifar10, cifar100, emnist, fmnist, femnist, medmnist, medmnistA, medmnistC, covid19, celeba, synthetic, svhn, tiny_imagenet, cinic10, domain]
  output_dir: "noniid-0.5_10"
  data_dir: "noniid-0.5_10"
  dataset: cifar100
  seed: 42
  model: myalex
  join_ratio: 1
  global_epoch: 400
  local_epoch: 5
  finetune_epoch: 5
  batch_size: 64
  test_interval: 400
  straggler_ratio: 0
  straggler_min_local_epoch: 0
  external_model_params_file: ""
  buffers: local # [local, global, drop]
  reset_optimizer: false
  optimizer:
    name: adam # [sgd, adam, adamw, rmsprop, adagrad]
    lr: 0.03
    dampening: 0 # for SGD
    weight_decay: 0
    momentum: 0 # for [SGD, RMSprop]
    alpha: 0.99 # for RMSprop
    nesterov: false # for SGD
    betas: [0.9, 0.999] # for [Adam, AdamW]
    amsgrad: false # for [Adam, AdamW]
  desc: "alex"

  lr_scheduler:
    name: null # [null, step, cosine, constant, plateau]
    step_size: 10 # an arg example for setting step lr_scheduler

  eval_test: true
  eval_val: false
  eval_train: false

  verbose_gap: 1
  visible: tensorboard # [null, visdom, tensorboard]
  use_cuda: true
  save_log: true
  save_model: true
  save_fig: true
  save_metrics: true
  check_convergence: true

fedtopk:
  topk: 10
  sparse_format: csr # [csr, coo]
  # Only the parameters in compress_layer will be compressed. If it is None, all parameters will be compressed. If it is [], no parameters will be compressed.
  compress_layer:

fedpaq:
  compress_level: 8
  compress_global: true
  # compress_layer: ["base.layer3.0.conv1.weight", "base.layer3.0.conv2.weight", "base.layer3.1.conv1.weight", "base.layer3.1.conv2.weight", "base.layer4.0.conv1.weight", "base.layer4.0.conv2.weight", "base.layer4.1.conv1.weight", "base.layer4.1.conv2.weight"]
  compress_layer:

gradestc:
  u_type: float32
  upload_setting_dict:
    # base.conv2.weight: [32, 32, 400]
    base.conv3.weight: [96, 96, 288]
    base.conv4.weight: [96, 96, 288]
    base.conv5.weight: [96, 96, 256]
    classifier.fc1.weight: [96, 96, 512, true]
    classifier.fc2.weight: [64, 64, 1024, true]

  broadcast_setting_dict:
    # base.conv2.weight: [32, 32, 400]
    # base.conv3.weight: [96, 96, 288]
    # base.conv4.weight: [96, 96, 288]
    # base.conv5.weight: [96, 96, 256]
    # classifier.fc1.weight: [96, 96, 512, true]
    # classifier.fc2.weight: [64, 64, 1024, true]

    # base.conv3.weight: [32, 32, 864]
    # base.conv4.weight: [32, 32, 864]
    # base.conv5.weight: [32, 32, 768]
    # classifier.fc1.weight: [128, 128, 1024]
    # classifier.fc2.weight: [128, 128, 1024]
# NOTE: For those unmentioned arguments, the default values are set in `get_hyperparams[]` in `class <method>Server` in `src/server/<method>.py`

svdfed:
  kp: 1
  ki: 1
  kd: 1
  gamma: 2
  fixed_adj_freq: 0
  setting_dict:
    base.conv3.weight: [3, 0.2]  # L, R
    base.conv4.weight: [3, 0.2]  # L, R
    base.conv5.weight: [3, 0.2]  # L, R
    classifier.fc1.weight: [3, 0.2]  # L, R
    classifier.fc2.weight: [3, 0.2]  # L, R